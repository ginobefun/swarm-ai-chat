generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SwarmUser {
  id                      String                        @id @default(uuid()) @db.Uuid
  userId                  String                        @unique @map("user_id")
  username                String?                       @unique @db.VarChar(50)
  avatarUrl               String?                       @map("avatar_url")
  role                    SwarmRole                     @default(USER)
  subscriptionStatus      SubscriptionStatus            @default(FREE) @map("subscription_status")
  preferences             Json                          @default("{}")
  createdAt               DateTime                      @default(now()) @map("created_at")
  updatedAt               DateTime                      @default(now()) @updatedAt @map("updated_at")
  createdAgents           SwarmAIAgent[]
  chatSessionParticipants SwarmChatSessionParticipant[]
  chatSessions            SwarmChatSession[]
  user                    User                          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("swarm_users")
}

model SwarmSkillTag {
  id          String              @id @db.VarChar(50)
  name        String              @db.VarChar(100)
  category    SwarmSkillCategory
  color       String              @db.VarChar(7)
  description String?
  isActive    Boolean             @default(true) @map("is_active")
  sortOrder   Int                 @default(0) @map("sort_order")
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @default(now()) @updatedAt @map("updated_at")
  agentSkills SwarmAIAgentSkill[]

  @@map("swarm_skill_tags")
}

model SwarmTool {
  id                  String             @id @db.VarChar(50)
  name                String             @db.VarChar(100)
  icon                String?            @db.VarChar(10)
  description         String?
  category            String             @db.VarChar(50)
  version             String             @default("1.0.0") @db.VarChar(20)
  apiEndpoint         String?            @map("api_endpoint")
  configurationSchema Json               @default("{}") @map("configuration_schema")
  defaultConfig       Json               @default("{}") @map("default_config")
  isActive            Boolean            @default(true) @map("is_active")
  requiresAuth        Boolean            @default(false) @map("requires_auth")
  costPerUse          Decimal            @default(0) @map("cost_per_use") @db.Decimal(10, 4)
  rateLimit           Int                @default(100) @map("rate_limit")
  createdAt           DateTime           @default(now()) @map("created_at")
  updatedAt           DateTime           @default(now()) @updatedAt @map("updated_at")
  agentTools          SwarmAIAgentTool[]

  @@map("swarm_tools")
}

model SwarmAIAgent {
  id                  String                        @id @db.VarChar(50)
  name                String                        @db.VarChar(100)
  avatar              String?                       @db.VarChar(10)
  avatarStyle         String?                       @map("avatar_style")
  description         String?
  specialty           String?                       @db.VarChar(255)
  personality         String?
  modelPreference     String                        @default("gpt-4") @map("model_preference") @db.VarChar(50)
  systemPrompt        String?                       @map("system_prompt")
  tags                String[]
  capabilityLevel     Int                           @default(1) @map("capability_level")
  averageResponseTime Int                           @default(3000) @map("average_response_time")
  costPerMessage      Decimal                       @default(0) @map("cost_per_message") @db.Decimal(10, 4)
  isActive            Boolean                       @default(true) @map("is_active")
  isPublic            Boolean                       @default(true) @map("is_public")
  isFeatured          Boolean                       @default(false) @map("is_featured")
  createdById         String?                       @map("created_by") @db.Uuid
  version             String                        @default("1.0.0") @db.VarChar(20)
  usageCount          Int                           @default(0) @map("usage_count")
  rating              Decimal                       @default(0.0) @db.Decimal(3, 2)
  createdAt           DateTime                      @default(now()) @map("created_at")
  updatedAt           DateTime                      @default(now()) @updatedAt @map("updated_at")
  agentSkills         SwarmAIAgentSkill[]
  agentTools          SwarmAIAgentTool[]
  usageExamples       SwarmAIAgentUsageExample[]
  createdBy           SwarmUser?                    @relation(fields: [createdById], references: [id])
  sessionParticipants SwarmChatSessionParticipant[]
  primarySessions     SwarmChatSession[]

  @@map("swarm_ai_agents")
}

model SwarmAIAgentSkill {
  id               String        @id @default(uuid()) @db.Uuid
  agentId          String        @map("agent_id") @db.VarChar(50)
  skillId          String        @map("skill_id") @db.VarChar(50)
  isPrimary        Boolean       @default(false) @map("is_primary")
  proficiencyLevel Int           @default(3) @map("proficiency_level")
  createdAt        DateTime      @default(now()) @map("created_at")
  agent            SwarmAIAgent  @relation(fields: [agentId], references: [id], onDelete: Cascade)
  skill            SwarmSkillTag @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([agentId, skillId])
  @@map("swarm_ai_agent_skills")
}

model SwarmAIAgentTool {
  id           String       @id @default(uuid()) @db.Uuid
  agentId      String       @map("agent_id") @db.VarChar(50)
  toolId       String       @map("tool_id") @db.VarChar(50)
  isPrimary    Boolean      @default(false) @map("is_primary")
  customConfig Json         @default("{}") @map("custom_config")
  isEnabled    Boolean      @default(true) @map("is_enabled")
  createdAt    DateTime     @default(now()) @map("created_at")
  agent        SwarmAIAgent @relation(fields: [agentId], references: [id], onDelete: Cascade)
  tool         SwarmTool    @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@unique([agentId, toolId])
  @@map("swarm_ai_agent_tools")
}

model SwarmAIAgentUsageExample {
  id              String       @id @default(uuid()) @db.Uuid
  agentId         String       @map("agent_id") @db.VarChar(50)
  title           String       @db.VarChar(255)
  prompt          String
  description     String?
  category        String       @default("general") @db.VarChar(50)
  difficultyLevel Int          @default(1) @map("difficulty_level")
  expectedOutput  String?      @map("expected_output")
  successRate     Decimal      @default(0) @map("success_rate") @db.Decimal(3, 2)
  orderIndex      Int          @default(0) @map("order_index")
  createdAt       DateTime     @default(now()) @map("created_at")
  agent           SwarmAIAgent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("swarm_ai_agent_usage_examples")
}

model SwarmChatSession {
  id             String                        @id @default(uuid()) @db.Uuid
  title          String?                       @db.VarChar(255)
  description    String?
  type           SwarmSessionType              @default(DIRECT)
  status         SwarmSessionStatus            @default(ACTIVE)
  createdById    String                        @map("created_by") @db.Uuid
  primaryAgentId String?                       @map("primary_agent_id") @db.VarChar(50)
  configuration  Json                          @default("{}")
  isPublic       Boolean                       @default(false) @map("is_public")
  isTemplate     Boolean                       @default(false) @map("is_template")
  isPinned       Boolean                       @default(false) @map("is_pinned")
  isArchived     Boolean                       @default(false) @map("is_archived")
  messageCount   Int                           @default(0) @map("message_count")
  totalCost      Decimal                       @default(0) @map("total_cost") @db.Decimal(10, 4)
  createdAt      DateTime                      @default(now()) @map("created_at")
  updatedAt      DateTime                      @default(now()) @updatedAt @map("updated_at")
  messages       SwarmChatMessage[]
  participants   SwarmChatSessionParticipant[]
  results        SwarmChatResult[]
  createdBy      SwarmUser                     @relation(fields: [createdById], references: [id])
  primaryAgent   SwarmAIAgent?                 @relation(fields: [primaryAgentId], references: [id])

  @@map("swarm_chat_sessions")
}

model SwarmChatSessionParticipant {
  id        String               @id @default(uuid()) @db.Uuid
  sessionId String               @map("session_id") @db.Uuid
  agentId   String?              @map("agent_id") @db.VarChar(50)
  role      SwarmParticipantRole @default(PARTICIPANT)
  isActive  Boolean              @default(true) @map("is_active")
  joinedAt  DateTime             @default(now()) @map("joined_at")
  userId    String?              @map("user_id") @db.Uuid
  agent     SwarmAIAgent?        @relation(fields: [agentId], references: [id])
  session   SwarmChatSession     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user      SwarmUser?           @relation(fields: [userId], references: [id])

  @@map("swarm_chat_session_participants")
}

model SwarmChatMessage {
  id              String             @id @default(uuid()) @db.Uuid
  sessionId       String             @map("session_id") @db.Uuid
  senderType      SwarmSenderType    @map("sender_type")
  senderId        String             @map("sender_id") @db.VarChar(50)
  replyToId       String?            @map("reply_to_id") @db.Uuid
  content         String
  contentType     SwarmContentType   @default(TEXT) @map("content_type")
  status          SwarmMessageStatus @default(SENT)
  metadata        Json               @default("{}")
  tokenCount      Int                @default(0) @map("token_count")
  processingTime  Int                @default(0) @map("processing_time")
  confidenceScore Decimal?           @map("confidence_score") @db.Decimal(3, 2)
  cost            Decimal            @default(0) @db.Decimal(10, 4)
  createdAt       DateTime           @default(now()) @map("created_at")
  replyTo         SwarmChatMessage?  @relation("MessageReplies", fields: [replyToId], references: [id])
  replies         SwarmChatMessage[] @relation("MessageReplies")
  session         SwarmChatSession   @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("swarm_chat_messages")
}

model SwarmChatResult {
  id        String           @id @default(uuid()) @db.Uuid
  sessionId String           @map("session_id") @db.Uuid
  turnIndex Int              @map("turn_index")
  stateBlob Json             @map("state_blob")
  summary   String?
  createdAt DateTime         @default(now()) @map("created_at")
  session   SwarmChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@map("swarm_chat_results")
}

model User {
  id            String     @id
  name          String?
  email         String     @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  accounts      Account[]
  sessions      Session[]
  swarmUser     SwarmUser?

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum SwarmRole {
  ADMIN      @map("admin")
  USER       @map("user")
  ENTERPRISE @map("enterprise")
}

enum SubscriptionStatus {
  FREE       @map("free")
  PRO        @map("pro")
  ENTERPRISE @map("enterprise")
}

enum SwarmSkillCategory {
  CORE   @map("core")
  TOOL   @map("tool")
  DOMAIN @map("domain")
}

enum SwarmSessionType {
  DIRECT   @map("direct")
  GROUP    @map("group")
  WORKFLOW @map("workflow")
}

enum SwarmSessionStatus {
  ACTIVE    @map("active")
  PAUSED    @map("paused")
  COMPLETED @map("completed")
  ARCHIVED  @map("archived")
}

enum SwarmParticipantRole {
  OWNER       @map("owner")
  ADMIN       @map("admin")
  PARTICIPANT @map("participant")
  OBSERVER    @map("observer")
}

enum SwarmSenderType {
  USER   @map("user")
  AGENT  @map("agent")
  SYSTEM @map("system")
}

enum SwarmContentType {
  TEXT   @map("text")
  FILE   @map("file")
  IMAGE  @map("image")
  CODE   @map("code")
  SYSTEM @map("system")
}

enum SwarmMessageStatus {
  SENDING   @map("sending")
  SENT      @map("sent")
  DELIVERED @map("delivered")
  READ      @map("read")
  FAILED    @map("failed")
}
