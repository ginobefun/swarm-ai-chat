generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SwarmUser {
  id                      String                        @id @default(uuid()) @db.Uuid
  userId                  String                        @unique @map("user_id")
  username                String?                       @unique @db.VarChar(50)
  avatarUrl               String?                       @map("avatar_url")
  role                    SwarmRole                     @default(USER)
  subscriptionStatus      SubscriptionStatus            @default(FREE) @map("subscription_status")
  preferences             Json                          @default("{}")
  createdAt               DateTime                      @default(now()) @map("created_at")
  updatedAt               DateTime                      @default(now()) @updatedAt @map("updated_at")
  createdAgents           SwarmAIAgent[]
  chatSessionParticipants SwarmChatSessionParticipant[]
  chatSessions            SwarmChatSession[]
  user                    User                          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("swarm_users")
}

model SwarmSkillTag {
  id          String              @id @db.VarChar(50)
  name        String              @db.VarChar(100)
  category    SwarmSkillCategory
  color       String              @db.VarChar(7)
  description String?
  isActive    Boolean             @default(true) @map("is_active")
  sortOrder   Int                 @default(0) @map("sort_order")
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @default(now()) @updatedAt @map("updated_at")
  agentSkills SwarmAIAgentSkill[]

  @@map("swarm_skill_tags")
}

model SwarmTool {
  id                  String             @id @db.VarChar(50)
  name                String             @db.VarChar(100)
  icon                String?            @db.VarChar(10)
  description         String?
  category            String             @db.VarChar(50)
  version             String             @default("1.0.0") @db.VarChar(20)
  apiEndpoint         String?            @map("api_endpoint")
  configurationSchema Json               @default("{}") @map("configuration_schema")
  defaultConfig       Json               @default("{}") @map("default_config")
  isActive            Boolean            @default(true) @map("is_active")
  requiresAuth        Boolean            @default(false) @map("requires_auth")
  costPerUse          Decimal            @default(0) @map("cost_per_use") @db.Decimal(10, 4)
  rateLimit           Int                @default(100) @map("rate_limit")
  createdAt           DateTime           @default(now()) @map("created_at")
  updatedAt           DateTime           @default(now()) @updatedAt @map("updated_at")
  agentTools          SwarmAIAgentTool[]

  @@map("swarm_tools")
}

// AI Model Configuration Table
model SwarmAIModel {
  id                String             @id @db.VarChar(50)
  provider          SwarmModelProvider
  modelName         String             @map("model_name") @db.VarChar(100) // API调用时使用的模型名
  displayName       String             @map("display_name") @db.VarChar(100) // 界面显示名称
  description       String?
  family            String             @db.VarChar(50) // GPT, Claude, Gemini, etc.
  version           String             @db.VarChar(20)
  baseUrl           String             @map("base_url")
  defaultTemperature Decimal           @default(0.7) @map("default_temperature") @db.Decimal(3, 2)
  capabilities      SwarmModelCapability[]
  contextWindow     Int                @map("context_window") // 上下文窗口大小
  maxOutputTokens   Int                @map("max_output_tokens") // 最大输出tokens
  inputPricePerK    Decimal            @map("input_price_per_k") @db.Decimal(10, 6) // 每1K输入tokens价格(USD)
  outputPricePerK   Decimal            @map("output_price_per_k") @db.Decimal(10, 6) // 每1K输出tokens价格(USD)
  requestsPerMinute Int?               @map("requests_per_minute") // RPM限制
  tokensPerMinute   Int?               @map("tokens_per_minute") // TPM限制
  intelligenceScore Int                @default(50) @map("intelligence_score") // 智商评分 0-100
  tier              SwarmModelTier     @default(STANDARD)
  isActive          Boolean            @default(true) @map("is_active")
  isSystemModel     Boolean            @default(true) @map("is_system_model") // 系统预置模型
  releaseDate       DateTime?          @map("release_date")
  metadata          Json               @default("{}")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @default(now()) @updatedAt @map("updated_at")
  agents            SwarmAIAgent[]     // 使用此模型的智能体

  @@map("swarm_ai_models")
}

// Enhanced AI Agent Table
model SwarmAIAgent {
  id                  String                        @id @db.VarChar(50)
  name                String                        @db.VarChar(100)
  description         String?
  longDescription     String?                       @map("long_description") // 详细描述
  category            SwarmAgentCategory            @default(GENERAL)
  status              SwarmAgentStatus              @default(ACTIVE)
  modelId             String                        @map("model_id") @db.VarChar(50) // 关联AI模型
  systemPrompt        String                        @map("system_prompt")
  
  // UI Configuration
  icon                String?                       @db.VarChar(10) // emoji图标
  color               String?                       @db.VarChar(7) // 主题颜色
  avatar              String?                       @db.VarChar(255) // 头像URL
  cssClass            String?                       @map("css_class") @db.VarChar(50)
  
  // Capabilities
  taskTypes           SwarmTaskType[]               @map("task_types") // 支持的任务类型
  specializations     String[]                      // 专业领域
  maxConcurrentTasks  Int                           @default(3) @map("max_concurrent_tasks")
  estimatedTime       Int                           @default(30) @map("estimated_time") // 预估处理时间(秒)
  
  // Personality
  communicationStyle  SwarmCommunicationStyle       @default(FRIENDLY) @map("communication_style")
  verbosity           SwarmVerbosity                @default(BALANCED)
  approach            SwarmApproach                 @default(PRACTICAL)
  traits              String[]                      // 性格特征
  
  // Configuration
  temperature         Decimal?                      @db.Decimal(3, 2) // 覆盖模型默认温度
  maxTokens           Int?                          @map("max_tokens") // 覆盖最大tokens
  functionCalling     Boolean                       @default(false) @map("function_calling")
  customParams        Json                          @default("{}") @map("custom_params")
  
  // Metadata & Stats
  difficulty          SwarmDifficulty               @default(BEGINNER)
  pricingTier         SwarmPricingTier              @default(FREE) @map("pricing_tier")
  tags                String[]
  version             String                        @default("1.0.0") @db.VarChar(20)
  
  // Statistics
  totalTasks          Int                           @default(0) @map("total_tasks")
  successRate         Decimal                       @default(0.95) @map("success_rate") @db.Decimal(3, 2)
  averageRating       Decimal                       @default(0.0) @map("average_rating") @db.Decimal(3, 2)
  totalUsageTime      Int                           @default(0) @map("total_usage_time") // 总使用时间(秒)
  lastUsed            DateTime?                     @map("last_used")
  
  // System & User Management
  isSystemAgent       Boolean                       @default(true) @map("is_system_agent") // 系统预置智能体
  isActive            Boolean                       @default(true) @map("is_active")
  isPublic            Boolean                       @default(true) @map("is_public") // 是否公开可见
  isFeatured          Boolean                       @default(false) @map("is_featured") // 是否推荐
  createdById         String?                       @map("created_by") @db.Uuid // 创建者
  requiredPermissions String[]                      @map("required_permissions") // 所需权限
  
  createdAt           DateTime                      @default(now()) @map("created_at")
  updatedAt           DateTime                      @default(now()) @updatedAt @map("updated_at")
  
  // Relationships
  model               SwarmAIModel                  @relation(fields: [modelId], references: [id])
  createdBy           SwarmUser?                    @relation(fields: [createdById], references: [id])
  agentSkills         SwarmAIAgentSkill[]
  agentTools          SwarmAIAgentTool[]
  usageExamples       SwarmAIAgentUsageExample[]
  sessionParticipants SwarmChatSessionParticipant[]
  primarySessions     SwarmChatSession[]

  @@map("swarm_ai_agents")
}

model SwarmAIAgentSkill {
  id               String        @id @default(uuid()) @db.Uuid
  agentId          String        @map("agent_id") @db.VarChar(50)
  skillId          String        @map("skill_id") @db.VarChar(50)
  isPrimary        Boolean       @default(false) @map("is_primary")
  proficiencyLevel Int           @default(3) @map("proficiency_level")
  createdAt        DateTime      @default(now()) @map("created_at")
  agent            SwarmAIAgent  @relation(fields: [agentId], references: [id], onDelete: Cascade)
  skill            SwarmSkillTag @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([agentId, skillId])
  @@map("swarm_ai_agent_skills")
}

model SwarmAIAgentTool {
  id           String       @id @default(uuid()) @db.Uuid
  agentId      String       @map("agent_id") @db.VarChar(50)
  toolId       String       @map("tool_id") @db.VarChar(50)
  isPrimary    Boolean      @default(false) @map("is_primary")
  customConfig Json         @default("{}") @map("custom_config")
  isEnabled    Boolean      @default(true) @map("is_enabled")
  createdAt    DateTime     @default(now()) @map("created_at")
  agent        SwarmAIAgent @relation(fields: [agentId], references: [id], onDelete: Cascade)
  tool         SwarmTool    @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@unique([agentId, toolId])
  @@map("swarm_ai_agent_tools")
}

model SwarmAIAgentUsageExample {
  id              String       @id @default(uuid()) @db.Uuid
  agentId         String       @map("agent_id") @db.VarChar(50)
  title           String       @db.VarChar(255)
  prompt          String
  description     String?
  category        String       @default("general") @db.VarChar(50)
  difficultyLevel Int          @default(1) @map("difficulty_level")
  expectedOutput  String?      @map("expected_output")
  successRate     Decimal      @default(0) @map("success_rate") @db.Decimal(3, 2)
  orderIndex      Int          @default(0) @map("order_index")
  createdAt       DateTime     @default(now()) @map("created_at")
  agent           SwarmAIAgent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("swarm_ai_agent_usage_examples")
}

model SwarmChatSession {
  id             String                        @id @default(uuid()) @db.Uuid
  title          String?                       @db.VarChar(255)
  description    String?
  type           SwarmSessionType              @default(DIRECT)
  status         SwarmSessionStatus            @default(ACTIVE)
  createdById    String                        @map("created_by") @db.Uuid
  primaryAgentId String?                       @map("primary_agent_id") @db.VarChar(50)
  configuration  Json                          @default("{}")
  isPublic       Boolean                       @default(false) @map("is_public")
  isTemplate     Boolean                       @default(false) @map("is_template")
  isPinned       Boolean                       @default(false) @map("is_pinned")
  isArchived     Boolean                       @default(false) @map("is_archived")
  messageCount   Int                           @default(0) @map("message_count")
  totalCost      Decimal                       @default(0) @map("total_cost") @db.Decimal(10, 4)
  createdAt      DateTime                      @default(now()) @map("created_at")
  updatedAt      DateTime                      @default(now()) @updatedAt @map("updated_at")
  messages       SwarmChatMessage[]
  participants   SwarmChatSessionParticipant[]
  results        SwarmChatResult[]
  createdBy      SwarmUser                     @relation(fields: [createdById], references: [id])
  primaryAgent   SwarmAIAgent?                 @relation(fields: [primaryAgentId], references: [id])

  @@map("swarm_chat_sessions")
}

model SwarmChatSessionParticipant {
  id        String               @id @default(uuid()) @db.Uuid
  sessionId String               @map("session_id") @db.Uuid
  agentId   String?              @map("agent_id") @db.VarChar(50)
  role      SwarmParticipantRole @default(PARTICIPANT)
  isActive  Boolean              @default(true) @map("is_active")
  joinedAt  DateTime             @default(now()) @map("joined_at")
  userId    String?              @map("user_id") @db.Uuid
  agent     SwarmAIAgent?        @relation(fields: [agentId], references: [id])
  session   SwarmChatSession     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user      SwarmUser?           @relation(fields: [userId], references: [id])

  @@map("swarm_chat_session_participants")
}

model SwarmChatMessage {
  id              String             @id @default(uuid()) @db.Uuid
  sessionId       String             @map("session_id") @db.Uuid
  senderType      SwarmSenderType    @map("sender_type")
  senderId        String             @map("sender_id") @db.VarChar(50)
  replyToId       String?            @map("reply_to_id") @db.Uuid
  content         String
  contentType     SwarmContentType   @default(TEXT) @map("content_type")
  status          SwarmMessageStatus @default(SENT)
  metadata        Json               @default("{}")
  tokenCount      Int                @default(0) @map("token_count")
  processingTime  Int                @default(0) @map("processing_time")
  confidenceScore Decimal?           @map("confidence_score") @db.Decimal(3, 2)
  cost            Decimal            @default(0) @db.Decimal(10, 4)
  createdAt       DateTime           @default(now()) @map("created_at")
  replyTo         SwarmChatMessage?  @relation("MessageReplies", fields: [replyToId], references: [id])
  replies         SwarmChatMessage[] @relation("MessageReplies")
  session         SwarmChatSession   @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("swarm_chat_messages")
}

model SwarmChatResult {
  id        String           @id @default(uuid()) @db.Uuid
  sessionId String           @map("session_id") @db.Uuid
  turnIndex Int              @map("turn_index")
  stateBlob Json             @map("state_blob")
  summary   String?
  createdAt DateTime         @default(now()) @map("created_at")
  session   SwarmChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@map("swarm_chat_results")
}

model User {
  id            String     @id
  name          String?
  email         String     @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  accounts      Account[]
  sessions      Session[]
  swarmUser     SwarmUser?

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum SwarmRole {
  ADMIN      @map("admin")
  USER       @map("user")
  ENTERPRISE @map("enterprise")
}

enum SubscriptionStatus {
  FREE       @map("free")
  PRO        @map("pro")
  ENTERPRISE @map("enterprise")
}

enum SwarmSkillCategory {
  CORE   @map("core")
  TOOL   @map("tool")
  DOMAIN @map("domain")
}

enum SwarmSessionType {
  DIRECT   @map("direct")
  GROUP    @map("group")
  WORKFLOW @map("workflow")
}

enum SwarmSessionStatus {
  ACTIVE    @map("active")
  PAUSED    @map("paused")
  COMPLETED @map("completed")
  ARCHIVED  @map("archived")
}

enum SwarmParticipantRole {
  OWNER       @map("owner")
  ADMIN       @map("admin")
  PARTICIPANT @map("participant")
  OBSERVER    @map("observer")
}

enum SwarmSenderType {
  USER   @map("user")
  AGENT  @map("agent")
  SYSTEM @map("system")
}

enum SwarmContentType {
  TEXT   @map("text")
  FILE   @map("file")
  IMAGE  @map("image")
  CODE   @map("code")
  SYSTEM @map("system")
}

enum SwarmMessageStatus {
  SENDING   @map("sending")
  SENT      @map("sent")
  DELIVERED @map("delivered")
  READ      @map("read")
  FAILED    @map("failed")
}

// AI Model Related Enums
enum SwarmModelProvider {
  OPENROUTER @map("openrouter")
  OPENAI     @map("openai")
  ANTHROPIC  @map("anthropic")
  GOOGLE     @map("google")
  CUSTOM     @map("custom")
}

enum SwarmModelCapability {
  TEXT_GENERATION  @map("text_generation")
  CODE_GENERATION  @map("code_generation")
  REASONING        @map("reasoning")
  ANALYSIS         @map("analysis")
  CREATIVE_WRITING @map("creative_writing")
  MULTILINGUAL     @map("multilingual")
  FUNCTION_CALLING @map("function_calling")
  VISION           @map("vision")
  LONG_CONTEXT     @map("long_context")
}

enum SwarmModelTier {
  BASIC    @map("basic")
  STANDARD @map("standard")
  PREMIUM  @map("premium")
}

// AI Agent Related Enums
enum SwarmAgentCategory {
  GENERAL      @map("general")
  CODING       @map("coding")
  RESEARCH     @map("research")
  CREATIVE     @map("creative")
  ANALYSIS     @map("analysis")
  EDUCATION    @map("education")
  BUSINESS     @map("business")
  SPECIALIZED  @map("specialized")
}

enum SwarmAgentStatus {
  ACTIVE      @map("active")
  INACTIVE    @map("inactive")
  MAINTENANCE @map("maintenance")
  DEPRECATED  @map("deprecated")
}

enum SwarmTaskType {
  RESEARCH   @map("research")
  ANALYZE    @map("analyze")
  SUMMARIZE  @map("summarize")
  DEVELOP    @map("develop")
  REVIEW     @map("review")
  CREATE     @map("create")
  TRANSLATE  @map("translate")
  OPTIMIZE   @map("optimize")
}

enum SwarmCommunicationStyle {
  FORMAL       @map("formal")
  CASUAL       @map("casual")
  FRIENDLY     @map("friendly")
  PROFESSIONAL @map("professional")
  ACADEMIC     @map("academic")
  CREATIVE     @map("creative")
}

enum SwarmVerbosity {
  CONCISE       @map("concise")
  BALANCED      @map("balanced")
  DETAILED      @map("detailed")
  COMPREHENSIVE @map("comprehensive")
}

enum SwarmApproach {
  ANALYTICAL  @map("analytical")
  CREATIVE    @map("creative")
  PRACTICAL   @map("practical")
  METHODICAL  @map("methodical")
  INNOVATIVE  @map("innovative")
}

enum SwarmDifficulty {
  BEGINNER     @map("beginner")
  INTERMEDIATE @map("intermediate")
  ADVANCED     @map("advanced")
  EXPERT       @map("expert")
}

enum SwarmPricingTier {
  FREE     @map("free")
  STANDARD @map("standard")
  PREMIUM  @map("premium")
}
